//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/XRControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @XRControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRControls"",
    ""maps"": [
        {
            ""name"": ""XR Controller"",
            ""id"": ""7343c824-ee34-414b-82ce-98ff2b776732"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""d2091d6b-342d-4489-b3ea-00b69b4003df"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""72fcf54c-46fe-4b6d-a76f-286eb9c6d6a9"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca07d81f-dd37-4871-8199-4e595b736778"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XR Controller
        m_XRController = asset.FindActionMap("XR Controller", throwIfNotFound: true);
        m_XRController_Trigger = m_XRController.FindAction("Trigger", throwIfNotFound: true);
    }

    ~@XRControls()
    {
        Debug.Assert(!m_XRController.enabled, "This will cause a leak and performance issues, XRControls.XRController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XR Controller
    private readonly InputActionMap m_XRController;
    private List<IXRControllerActions> m_XRControllerActionsCallbackInterfaces = new List<IXRControllerActions>();
    private readonly InputAction m_XRController_Trigger;
    public struct XRControllerActions
    {
        private @XRControls m_Wrapper;
        public XRControllerActions(@XRControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_XRController_Trigger;
        public InputActionMap Get() { return m_Wrapper.m_XRController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRControllerActions set) { return set.Get(); }
        public void AddCallbacks(IXRControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_XRControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRControllerActionsCallbackInterfaces.Add(instance);
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
        }

        private void UnregisterCallbacks(IXRControllerActions instance)
        {
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
        }

        public void RemoveCallbacks(IXRControllerActions instance)
        {
            if (m_Wrapper.m_XRControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_XRControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRControllerActions @XRController => new XRControllerActions(this);
    public interface IXRControllerActions
    {
        void OnTrigger(InputAction.CallbackContext context);
    }
}
